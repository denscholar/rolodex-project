{"version":3,"sources":["components/card/Card.js","components/cardList/CardList.js","components/search-box/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","name","email","className","src","id","alt","CardList","props","monsters","map","SearchBox","placeholder","onChange","type","App","useState","search","setSearch","setMonsters","useEffect","fetch","then","response","json","users","filteredMonster","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAceA,EAZF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACNC,EAAOD,EAAQC,KACfC,EAAQF,EAAQE,MACtB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BJ,EAAQK,GAAlC,0BAA8DC,IAAI,gBAC1E,6BAAKL,IACL,4BAAIC,QCIDK,EAVE,SAACC,GACd,OACI,qBAAKL,UAAU,YAAf,SACKK,EAAMC,SAASC,KAAI,SAACV,GACjB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQK,UCO3BM,G,MAXG,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC9B,OACI,8BACI,uBAAOV,UAAU,SACbW,KAAK,SACLF,YAAaA,EACbC,SAAUA,QCuBXE,MA3Bf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEmBF,mBAAS,IAF5B,mBAENP,EAFM,KAEIU,EAFJ,KAKbC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIN,EAAYM,QAC5B,IAEH,IAAMC,EAAkBjB,EAASkB,QAAO,SAAA3B,GAAO,OAC7CA,EAAQC,KAAK2B,cACVC,SAASZ,EAAOW,kBAKrB,OACE,sBAAKzB,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWS,YAAY,kBAAkBC,SANxB,SAACiB,GACpBZ,EAAUY,EAAEC,OAAOC,UAMjB,cAAC,EAAD,CAAUvB,SAAUiB,QCfXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.43328579.chunk.js","sourcesContent":["import '../card/Card.css';\r\n\r\nconst Card = ({ monster }) => {\r\n    const name = monster.name;\r\n    const email = monster.email;\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt=\"robortharsh\" />\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import '../cardList/CardList.css'\r\nimport Card from '../card/Card';\r\n\r\nconst CardList = (props) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {props.monsters.map((monster) => {\r\n                return <Card key={monster.id} monster={monster}/>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import '../search-box/SearchBox.css';\r\n\r\n\r\nconst SearchBox = ({ placeholder, onChange }) => {\r\n    return (\r\n        <div>\r\n            <input className=\"search\"\r\n                type=\"search\"\r\n                placeholder={placeholder}\r\n                onChange={onChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport CardList from './components/cardList/CardList';\nimport SearchBox from './components/search-box/SearchBox'\n\nfunction App() {\n  const [search, setSearch] = useState('');\n  const [monsters, setMonsters] = useState([])\n\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => setMonsters(users));\n  }, [])\n\n  const filteredMonster = monsters.filter(monster =>\n    monster.name.toLowerCase()\n      .includes(search.toLowerCase()));\n\n  const handleChange = (e) => {\n    setSearch(e.target.value)\n  }\n  return (\n    <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n      <SearchBox placeholder='search monsters' onChange={handleChange} />\n      <CardList monsters={filteredMonster} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}